clear
clc
initPlots

%Parameters
g = 9.81; 
m = (0.027);
zI = [0;0;1];

%State-space matrices
d = 0.1;
A=[zeros(6,3) [eye(3); -d*eye(3)]];
B=[zeros(3,3); eye(3)];
C=[eye(6)];
D = zeros(6,6); 

% Variable dimensions
nx = 6;
ny = 6;

% Controlabillity and observability analysis
CTR=rank(ctrb(A,B));
OBS=rank(obsv(A,C));

if CTR==nx
    disp('System is controllable')
else
    disp('System is uncontrollable')
end
if OBS == nx
   disp('System is observable')
else
    disp('System is unobservable')
end
   
%LQR controller simulation

    % Q and R matrices and gain computation
    Q = diag([10,10,10,1,1,1]);
    R = diag([1,1,1]);
    Klqr = lqr(A,B,Q,R);
    
    %Checking  stability
    lbd_CL_lqr = eig(A-B*Klqr); 
    if any(real(lbd_CL_lqr) >= 0), disp('CL system with LQR not stable');
    else, disp('CL system with LQR is stable'); end
    
%Closed loop system with LQR controller

%State-space simulation
Dt =0.01;
t = 0:Dt:30; 
NSim = length(t);
x = zeros(nx,NSim);
x(:,1) = [0.5; 1; 1.5; 0; 0; 0]; % Set initial condition
y = zeros(6,NSim);
u = zeros(3,NSim);

    
    %LQR controller simulation with linear model
     for k = 1:NSim

    % get measurements:
    y(:,k) = C*x(:,k);
    % Basic LQR controller
    %u(:,k) = -Klqr*[y(:,k);x(4:6,k)]; 
    u(:,k) = -Klqr*x(:,k); 
    % simulate system:
    x_dot = A*x(:,k) + B*u(:,k); % system derivatives
    xp = x(:,k) + Dt*x_dot; % integrate system state
    if k < NSim
        x(:,k+1) = xp;
    end

    end

    figure(1);
    subplot(3,1,1);
    plot(t, y(1,:), t, y(2,:), t, y(3,:));
    title('Position without reference tracking - Linear model');
    xlabel('Time (s)');
    ylabel('Position (m)');
    legend('x', 'y', 'z');

    subplot(3,1,2);
    plot(t, y(4,:), t, y(5,:), t, y(6,:));
    title('Velocity without reference tracking - Linear model');
    xlabel('Time (s)');
    ylabel('Velocity (m/s)');
    legend('$$v_x$$', '$$v_y$$', '$$v_z$$');


    %ylim([0, 3.5])
    subplot(3,1,3);
    plot(t, u);
    title('Control input');
    xlabel('Time (s)');
    ylabel('Control input');
    legend('$$u_{ax}$$', '$$u_{ay}$$', '$$u_{az}$$');


% Simulação do controlador LQR com modelo não linear
x = zeros(6, NSim);
x(:,1) = [1; 2; 3; 0; 0; 0]; 
y = zeros(ny, NSim);
u = zeros(3, NSim);
for k = 1:NSim
    % Estado atual
    p = x(1:3,k);
    v = x(4:6,k);
    
    % Calcular a entrada de controle LQR
    u(:, k) = - Klqr *x(:,k);
    
    % Computar a derivada do estado
    p_dot = v;
    v_dot = u(:,k);
    x_dot = [p_dot; v_dot];
    
    % Integrar o estado
    x(:,k+1) = x(:,k) + Dt * x_dot;
    
    % Computar a saída atual
    y(:,k) = C*x(:, k);
end


figure(2);
subplot(3,1,1);
plot(t, y(1,:), t, y(2,:), t, y(3,:));
title('Position without reference tracking - Nonlinear model');
xlabel('Time (s)');
ylabel('Position (m)');
legend('x', 'y', 'z');

subplot(3,1,2);
plot(t, y(4,:), t, y(5,:), t, y(6,:));
title('Velocity without reference tracking - Nonlinear model');
xlabel('Time (s)');
ylabel('Velocity (m/s)');
legend('$$v_x$$', '$$v_y$$', '$$v_z$$');

subplot(3,1,3);
plot(t, u);
title('Control input - Nonlinear model');
xlabel('Time (s)');
ylabel('Control input');
legend('$$u_{ax}$$', '$$u_{ay}$$', '$$u_{az}$$');


    %LQR controller simulation with reference tracking
    %State-Space matrices
    A_lqr= A-B*Klqr;
    %B_lqr=[B zeros(6,3)];
    B_lqr=-A_lqr;
    D = zeros(6,6); 
    SS=ss(A_lqr,B_lqr,C,D);
    x = zeros(nx,NSim);
    ref=ones(size(x)); %reference state-space variables
    %x0=zeros(6,1); % Initial conditions
    x0=[0;0;0;0;0;0];
    u_i=[   1*ref(1)*ones(size(t))
            1.5*ref(2)*ones(size(t))
            2*ref(3)*ones(size(t))
            2*ref(4)*ones(size(t))
            2.5*ref(5)*ones(size(t))
            3*ref(6)*ones(size(t))];
    [y_ref,t,x_ref] = lsim(SS,u_i,t,x0); 

    x_ref=x_ref';
    u=-Klqr*x_ref;
    y_ref=y_ref';

    figure(3);
    subplot(3,1,1);
    plot(t, y_ref(1,:), t, y_ref(2,:), t, y_ref(3,:));%,t,u_i(1,:),'k--',t,u_i(2,:),'k--',t,u_i(3,:),'k--','LineWidth',1
    title('Position with reference tracking');
    xlabel('Time (s)');
    ylabel('Position (m)');
    legend('x', 'y', 'z');

    subplot(3,1,2);
    plot(t, y_ref(4,:), t, y_ref(5,:), t, y_ref(6,:));
    title('Velocity with reference tracking');
    xlabel('Time (s)');
    ylabel('Velocity (m/s)');
    legend('$$v_x$$', '$$v_y$$', '$$v_z$$');

    %ylim([0, 2.5])
    subplot(3,1,3);
    plot(t, u);
    title('Control input');
    xlabel('Time (s)');
    ylabel('Control input');
    legend('$$u_{ax}$$', '$$u_{ay}$$', '$$u_{az}$$');

    %% 2.1 Nonlinear control and trials

    function x_dot = nonlinear_dynamics(x,  kp,  kv, pref, vref, g)
    % State variables
    p = x(1:3);
    v = x(4:6);

    % Errors
    ep = p - pref;
    ev = v - vref;

    % Control law
    ua = - kp * ep -  kv * ev - g;

    % State derivatives
    p_dot = v;
    v_dot = ua + g;

    % Concatenate derivatives
    x_dot = [p_dot; v_dot];
end


% Initial state
x = zeros(6, NSim);
y = zeros(6,NSim);
x(:,1) = [1.5; 2; 2.5; 0; 0; 0]; % Initial state

% Desired state
pref = [1; 1; 1]; % Desired position
vref = [0; 0; 0]; % Desired velocity

% Gains
 kp = 1.1;
 kv = 1;

% Storage for control inputs
u = zeros(3, NSim);

% Simulate the system
for k = 1:NSim
    % Compute the state derivative
    x_dot = nonlinear_dynamics(x(:, k),  kp,  kv, pref, vref, g);

    % Integrate to get the next state
    x(:, k+1) = x(:, k) + Dt * x_dot;
    y(:,k) = C*x(:,k);

    % Compute control input for storage 
    p = x(1:3, k);
    v = x(4:6, k);
    ep = p - pref;
    ev = v - vref;
    u(:, k) = - kp * ep -  kv * ev - g;
end

%Plot results

figure(4);
subplot(3,1,1);
plot(t, y(1,:), t, y(2,:), t, y(3,:));
title('Positions - Nonlinear Model with lyapunov feedback linearization');
xlabel('Time (s)');
ylabel('Position (m)');
legend('x', 'y', 'z');

subplot(3,1,2);
plot(t, y(4,:), t, y(5,:), t, y(6,:));
title('Velocity - Nonlinear Model with lyapunov feedback linearization');
xlabel('Time (s)');
ylabel('Velocity (m/s)');
legend('$$v_x$$', '$$v_y$$', '$$v_z$$');

subplot(3,1,3);
plot(t, u);
title('Control Inputs');
xlabel('Time (s)');
ylabel('Control Input');
legend('$$u_{ax}$$', '$$u_{ay}$$', '$$u_{az}$$');



%% 2.2 Non linear controller
% initialize variables for all drones:

Tend = 70;
dTo = 0.1;
dTi = 0.05;
Nsim = round(Tend/dTi)+1;
p_ref_static = [0.5;0.5;1];

t = 0:dTi:Tend;
nt = length(t);
nx = 6;
nu = 4;

p0 = [0;0;0];
v0 = [0;0;0];
x = zeros(nx,Nsim);
T = zeros(1,Nsim);
x(:,1) = [p0;v0];

% Square reference
L = 0.7;           % side length of the square
sg_t = Tend/4;      % time for each segment

%initialization
p_ref = zeros(3, length(t));
v_ref = zeros(3, length(t));
a_ref = zeros(3, length(t));

for k = 1:length(t)
    ct = mod(t(k), Tend); 
    if ct < sg_t
        p_ref(:, k) = [L/2 - (L/Tend)*ct; L/2; 1];
        v_ref(:, k) = [-L/Tend; 0; 0];
    elseif ct < 2*sg_t
        ct = ct - sg_t;
        p_ref(:, k) = [-L/2; L/2 - (L/Tend)*ct; 1];
        v_ref(:, k) = [0; -L/Tend; 0];
   elseif ct < 3*sg_t
        ct = ct - 2*sg_t;
        p_ref(:, k) = [-L/2 + (L/Tend)*ct; -L/2; 1];
        v_ref(:, k) = [L/Tend; 0; 0];
        a_ref(:, k) = [0; 0; 0];
    else
        ct = ct - 3*sg_t;
        p_ref(:, k) = [L/2; -L/2 + (L/Tend)*ct; 1];
        v_ref(:, k) = [0; L/Tend; 0];
        
    end
end

% main time loop for simulation
for k = 1:Nsim

    % get state vector and plot it
    p = x(1:3,k);
    v = x(4:6,k);
    p_d = p_ref(:,k);
    v_d = v_ref(:,k);
    a_d = a_ref(:,k);

    % outer-loop controller
    e_p = p - p_d;
    e_v = v - v_d;

    % Mellinger Controller (up to attitude commands)
    f_des = - kp*e_p - kv*e_v + m*g*zI + m*a_d;

    % compute desired rotation matrix
    zB_des(:,k) = f_des/norm(f_des);

    % compute thrust
    T(:,k) = f_des'*zB_des(:,k);
      
    
    % nonlinear drone model
    dot_p = v;
    dot_v = -g*zI - d*v + T(:,k)/m*zB_des(:,k);

    % discretization 
    pp = p + dTi*dot_p;
    vp = v + dTi*dot_v;
    if k~=Nsim
        x(:,k+1) = [pp;vp];
    end
end

p = x(1:3,:);

% drone_show_data;
% show results plot
set(0,'defaultTextInterpreter','latex');
set(0,'defaultLegendInterpreter','latex');
sstblue         = [0,128,255]/255;
sstlightblue    = [48,208,216]/255;
sstlighterblue  = [50,220,240]/255;
sstlightestblue = [60,230,255]/255;
sstgreen        = [43,191,92]/255;
sstlightgreen   = [140,255,200]/255;
sstlightergreen = [160,255,225]/255;
sstgray         = [70,70,70]/255;
sstlightgray    = [200,200,200]/255;

dcolors = { sstgreen, sstblue, sstlightblue, sstlighterblue, sstlightestblue, sstlightgreen, sstlightergreen, sstlightgray };

%angle plots
figure(101);

subplot(311);
ylim ([-0.5 0.5]);
plot(t,T,'Color',dcolors{1});
hold on;
grid on;
ylabel('$$T(t)$$ [N]');
title('Control variables');

subplot(312);
plot(t,-zB_des(2,:),'Color',dcolors{1}); %plots phi
hold on;
grid on;
ylabel('$$\phi(t)$$ [rad]');

subplot(313);
plot(t,zB_des(1,:),'Color',dcolors{1}); %plots theta
hold on;
grid on;
ylabel('$$\theta(t)$$ [rad]');
xlabel('$$t$$ [s]');


%position plots
figure(102);

subplot(311);
plot(t,p_ref(1,:),'Color',sstgray);
hold on;
plot(t,x(1,:),'Color',dcolors{1});
hold off;
grid on;
ylabel('$$x(t)$$ [m]');
title('Drone position and reference');

subplot(312);
plot(t,p_ref(2,:),'Color',sstgray);
hold on;
plot(t,x(2,:),'Color',dcolors{1});
hold off;
grid on;
ylabel('$$y(t)$$ [m]');

subplot(313);
plot(t,p_ref(3,:),'Color',sstgray);
hold on;
plot(t,x(3,:),'Color',dcolors{1});
hold off;
grid on;
xlabel('$$t$$ [s]');
ylabel('$$z(t)$$ [m]');


lbd = [-zB_des(2,:);zB_des(1,:);zeros(1,length(zB_des))];

sstgray = [70,70,70]/255;
nt = length(t);

figure(104);

hini = plot3(p(1,1),p(2,1),p(3,1),'o','Color',dcolors{1},'MarkerSize',2);
hold on;
href = plot3(p_ref(1,:),p_ref(2,:),p_ref(3,:),'--','Color',sstgray);
hp = plot3(p(1,1:2),p(2,1:2),p(3,1:2),'-','Color',dcolors{1});
hd = drone_plot(p(1:3,1),lbd(:,1),[],dcolors{1});

hold off;
grid on;
axis equal;
axis([-1.2 1.2 -1.2 1.2 0 3]);
xlabel('x [m]');
ylabel('y [m]');
zlabel('z [m]');
legend('start','end','trajectory');
for k = 2:2:nt
    set(hp,'XData',p(1,1:k),'YData',p(2,1:k),'ZData',p(3,1:k));
    drone_plot(p(1:3,k),lbd(:,k),hd);

    axis equal;
    drawnow;
    %pause(dt/10);
end

%% 3 Motion Planning
% Parameters
arenaDimensions = [2.4, 4.2, 2.0];  % Dimensions of the arena [x, y, z]

% Define obstacles (assuming cuboid obstacles)
obstacleVertices = {...
    [-0.6, 0.7, 0.0; -0.6, 0.8, 0.0; 0.6, 0.8, 0.0; 0.6, 0.7, 0.0; ... % PNoFly1 bottom face
     -0.6, 0.7, 1.2; -0.6, 0.8, 1.2; 0.6, 0.8, 1.2; 0.6, 0.7, 1.2], ... % PNoFly1 top face
    [-0.6, -0.8, 0.6; -0.6, -0.7, 0.6; 0.6, -0.7, 0.6; 0.6, -0.8, 0.6; ... % PNoFly2 bottom face
     -0.6, -0.8, 2.0; -0.6, -0.7, 2.0; 0.6, -0.7, 2.0; 0.6, -0.8, 2.0]  % PNoFly2 top face
};

startNode = [0, 0, 0];  % Start position [x, y, z]
goalNode = [0, 1.1, 0.6];     % Goal position [x, y, z]

% Path points from the provided data
pathPoints = [0 0 0;
              0.13418212585901024 -0.068487397 0.47676475705889115;
              -0.13059902 -0.40306127 0.7374393979929018;
              0.16879740308559615 -0.475872483 1.1312163770848005;
              0.5627947587150471 0.36254752942255924 1.2892731861307276;
              0.5627947587150471 0.36254752942255924 1.2892731861307276;
              0.6093462069074541 1.2854007124196802 1.480412760896428;
              0.6380481536852431 1.3770168560628528 0.9968726419222178;
              0.3328070527169315 1.578509161964965 0.6559493060504964;
              0.20327724248165838 1.165763976745219 0.4052234790235788;
              0 1.1 0.6];

% Plot arena and obstacles
figure;
hold on;
axis equal;
grid on;
view(3);
xlabel('X');
ylabel('Y');
zlabel('Z');
xlim([-1.2, 1.2]);
ylim([-2.1, 2.1]);
zlim([0.0, 2.0]);

% Plot obstacles
for i = 1:length(obstacleVertices)
    obstacle = obstacleVertices{i};
    obstacleX = [obstacle(1:4,1); obstacle(1,1); obstacle(5:8,1); obstacle(5,1)]; % Closing the loop
    obstacleY = [obstacle(1:4,2); obstacle(1,2); obstacle(5:8,2); obstacle(5,2)];
    obstacleZ = [obstacle(1:4,3); obstacle(1,3); obstacle(5:8,3); obstacle(5,3)];
    fill3(obstacleX(1:5), obstacleY(1:5), obstacleZ(1:5), 'k'); % Bottom face
    fill3(obstacleX(6:10), obstacleY(6:10), obstacleZ(6:10), 'k'); % Top face
    for j = 1:4
        fill3(obstacleX([j, j+1, j+6, j+5]), obstacleY([j, j+1, j+6, j+5]), obstacleZ([j, j+1, j+6, j+5]), 'k'); % Side faces
    end
end

% Plot start and goal nodes
plot3(startNode(1), startNode(2), startNode(3), 'go', 'MarkerSize', 10, 'LineWidth', 2);
plot3(goalNode(1), goalNode(2), goalNode(3), 'ro', 'MarkerSize', 10, 'LineWidth', 2);

% Plot path
plot3(pathPoints(:,1), pathPoints(:,2), pathPoints(:,3), 'b.-', 'LineWidth', 2);

title('RRT Motion Planning in 3D');
hold off;
